##################################################
# file: CommonService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/local/bin/wsdl2py common.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://s.mappoint.net/mappoint-30/
##############################

class ns0:
    targetNamespace = "http://s.mappoint.net/mappoint-30/"

    class ArrayOfVersionInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "ArrayOfVersionInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfVersionInfo_Def.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","VersionInfo",lazy=False)(pname=(ns,"VersionInfo"), aname="_VersionInfo", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._VersionInfo = []
                    return
            Holder.__name__ = "ArrayOfVersionInfo_Holder"
            self.pyclass = Holder

    class VersionInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "VersionInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.VersionInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Component"), aname="_Component", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Version"), aname="_Version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Component = None
                    self._Version = None
                    return
            Holder.__name__ = "VersionInfo_Holder"
            self.pyclass = Holder

    class CustomerInfoHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "CustomerInfoHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomerInfoHeader_Def.schema
            TClist = [ZSI.TCnumbers.Ishort(pname=(ns,"CustomLogEntry"), aname="_CustomLogEntry", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CustomLogEntry = None
                    return
            Holder.__name__ = "CustomerInfoHeader_Holder"
            self.pyclass = Holder

    class UserInfoHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "UserInfoHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.UserInfoHeader_Def.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","CultureInfo",lazy=False)(pname=(ns,"Culture"), aname="_Culture", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://s.mappoint.net/mappoint-30/","DistanceUnit",lazy=False)(pname=(ns,"DefaultDistanceUnit"), aname="_DefaultDistanceUnit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://s.mappoint.net/mappoint-30/","CountryRegionContext",lazy=False)(pname=(ns,"Context"), aname="_Context", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Culture = None
                    self._DefaultDistanceUnit = None
                    self._Context = None
                    return
            Holder.__name__ = "UserInfoHeader_Holder"
            self.pyclass = Holder

    class CultureInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "CultureInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CultureInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Lcid"), aname="_Lcid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._Lcid = None
                    return
            Holder.__name__ = "CultureInfo_Holder"
            self.pyclass = Holder

    class DistanceUnit_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "DistanceUnit")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CountryRegionContext_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "CountryRegionContext")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CountryRegionContext_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"EntityID"), aname="_EntityID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Iso2"), aname="_Iso2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._EntityID = None
                    self._Iso2 = None
                    return
            Holder.__name__ = "CountryRegionContext_Holder"
            self.pyclass = Holder

    class ArrayOfInt_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "ArrayOfInt")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfInt_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"int"), aname="_int", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._int = []
                    return
            Holder.__name__ = "ArrayOfInt_Holder"
            self.pyclass = Holder

    class ArrayOfCountryRegionInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "ArrayOfCountryRegionInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfCountryRegionInfo_Def.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","CountryRegionInfo",lazy=False)(pname=(ns,"CountryRegionInfo"), aname="_CountryRegionInfo", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CountryRegionInfo = []
                    return
            Holder.__name__ = "ArrayOfCountryRegionInfo_Holder"
            self.pyclass = Holder

    class CountryRegionInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "CountryRegionInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CountryRegionInfo_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"EntityID"), aname="_EntityID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://s.mappoint.net/mappoint-30/","LatLong",lazy=False)(pname=(ns,"LatLong"), aname="_LatLong", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Iso2"), aname="_Iso2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Iso3"), aname="_Iso3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FriendlyName"), aname="_FriendlyName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OfficialName"), aname="_OfficialName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._EntityID = None
                    self._LatLong = None
                    self._Iso2 = None
                    self._Iso3 = None
                    self._FriendlyName = None
                    self._OfficialName = None
                    return
            Holder.__name__ = "CountryRegionInfo_Holder"
            self.pyclass = Holder

    class LatLong_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "LatLong")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LatLong_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"Latitude"), aname="_Latitude", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Longitude"), aname="_Longitude", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Latitude = None
                    self._Longitude = None
                    return
            Holder.__name__ = "LatLong_Holder"
            self.pyclass = Holder

    class ArrayOfEntityType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "ArrayOfEntityType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfEntityType_Def.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","EntityType",lazy=False)(pname=(ns,"EntityType"), aname="_EntityType", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._EntityType = []
                    return
            Holder.__name__ = "ArrayOfEntityType_Holder"
            self.pyclass = Holder

    class EntityType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "EntityType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EntityType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ParentName"), aname="_ParentName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Definition"), aname="_Definition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://s.mappoint.net/mappoint-30/","ArrayOfEntityProperty",lazy=False)(pname=(ns,"Properties"), aname="_Properties", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._DisplayName = None
                    self._ParentName = None
                    self._Definition = None
                    self._Properties = None
                    return
            Holder.__name__ = "EntityType_Holder"
            self.pyclass = Holder

    class ArrayOfEntityProperty_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "ArrayOfEntityProperty")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfEntityProperty_Def.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","EntityProperty",lazy=False)(pname=(ns,"Property"), aname="_Property", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Property = []
                    return
            Holder.__name__ = "ArrayOfEntityProperty_Holder"
            self.pyclass = Holder

    class EntityProperty_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "EntityProperty")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EntityProperty_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DataType"), aname="_DataType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._DisplayName = None
                    self._DataType = None
                    return
            Holder.__name__ = "EntityProperty_Holder"
            self.pyclass = Holder

    class ArrayOfString_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "ArrayOfString")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfString_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"string"), aname="_string", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._string = []
                    return
            Holder.__name__ = "ArrayOfString_Holder"
            self.pyclass = Holder

    class ArrayOfDataSource_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "ArrayOfDataSource")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfDataSource_Def.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","DataSource",lazy=False)(pname=(ns,"DataSource"), aname="_DataSource", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DataSource = []
                    return
            Holder.__name__ = "ArrayOfDataSource_Holder"
            self.pyclass = Holder

    class DataSource_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "DataSource")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DataSource_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Version"), aname="_Version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://s.mappoint.net/mappoint-30/","DataSourceCapability",lazy=False)(pname=(ns,"Capability"), aname="_Capability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://s.mappoint.net/mappoint-30/","ArrayOfInt",lazy=False)(pname=(ns,"EntityExtent"), aname="_EntityExtent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._Version = None
                    self._Description = None
                    self._Capability = None
                    self._EntityExtent = None
                    return
            Holder.__name__ = "DataSource_Holder"
            self.pyclass = Holder

    class DataSourceCapability_Def(ZSI.TC.List, TypeDefinition):
        itemType = None
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "DataSourceCapability")
        def __init__(self, pname, **kw):
            ZSI.TC.List.__init__(self, pname, **kw)

    class ArrayOfLatLong_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "ArrayOfLatLong")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfLatLong_Def.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","LatLong",lazy=False)(pname=(ns,"LatLong"), aname="_LatLong", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LatLong = []
                    return
            Holder.__name__ = "ArrayOfLatLong_Holder"
            self.pyclass = Holder

    class ArrayOfDouble_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "ArrayOfDouble")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfDouble_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"double"), aname="_double", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._double = []
                    return
            Holder.__name__ = "ArrayOfDouble_Holder"
            self.pyclass = Holder

    class TokenSpecification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://s.mappoint.net/mappoint-30/"
        type = (schema, "TokenSpecification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TokenSpecification_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ClientIPAddress"), aname="_ClientIPAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TokenValidityDurationMinutes"), aname="_TokenValidityDurationMinutes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ClientIPAddress = None
                    self._TokenValidityDurationMinutes = None
                    return
            Holder.__name__ = "TokenSpecification_Holder"
            self.pyclass = Holder

    class GetVersionInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetVersionInfo"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetVersionInfo_Dec.schema
            TClist = []
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetVersionInfo')
            kw["aname"] = "_GetVersionInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "GetVersionInfo_Holder"
            self.pyclass = Holder

    class GetVersionInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetVersionInfoResponse"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetVersionInfoResponse_Dec.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","ArrayOfVersionInfo",lazy=False)(pname=(ns,"GetVersionInfoResult"), aname="_GetVersionInfoResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetVersionInfoResponse')
            kw["aname"] = "_GetVersionInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetVersionInfoResult = None
                    return
            Holder.__name__ = "GetVersionInfoResponse_Holder"
            self.pyclass = Holder

    class CustomerInfoHeader_Dec(ElementDeclaration):
        literal = "CustomerInfoHeader"
        schema = "http://s.mappoint.net/mappoint-30/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'CustomerInfoHeader')
            kw["aname"] = "_CustomerInfoHeader"
            if ns0.CustomerInfoHeader_Def not in ns0.CustomerInfoHeader_Dec.__bases__:
                bases = list(ns0.CustomerInfoHeader_Dec.__bases__)
                bases.insert(0, ns0.CustomerInfoHeader_Def)
                ns0.CustomerInfoHeader_Dec.__bases__ = tuple(bases)

            ns0.CustomerInfoHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CustomerInfoHeader_Dec_Holder"

    class UserInfoHeader_Dec(ElementDeclaration):
        literal = "UserInfoHeader"
        schema = "http://s.mappoint.net/mappoint-30/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'UserInfoHeader')
            kw["aname"] = "_UserInfoHeader"
            if ns0.UserInfoHeader_Def not in ns0.UserInfoHeader_Dec.__bases__:
                bases = list(ns0.UserInfoHeader_Dec.__bases__)
                bases.insert(0, ns0.UserInfoHeader_Def)
                ns0.UserInfoHeader_Dec.__bases__ = tuple(bases)

            ns0.UserInfoHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UserInfoHeader_Dec_Holder"

    class GetCountryRegionInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetCountryRegionInfo"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetCountryRegionInfo_Dec.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","ArrayOfInt",lazy=False)(pname=(ns,"entityIDs"), aname="_entityIDs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetCountryRegionInfo')
            kw["aname"] = "_GetCountryRegionInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entityIDs = None
                    return
            Holder.__name__ = "GetCountryRegionInfo_Holder"
            self.pyclass = Holder

    class GetCountryRegionInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetCountryRegionInfoResponse"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetCountryRegionInfoResponse_Dec.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","ArrayOfCountryRegionInfo",lazy=False)(pname=(ns,"GetCountryRegionInfoResult"), aname="_GetCountryRegionInfoResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetCountryRegionInfoResponse')
            kw["aname"] = "_GetCountryRegionInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetCountryRegionInfoResult = None
                    return
            Holder.__name__ = "GetCountryRegionInfoResponse_Holder"
            self.pyclass = Holder

    class GetEntityTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetEntityTypes"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetEntityTypes_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"dataSourceName"), aname="_dataSourceName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetEntityTypes')
            kw["aname"] = "_GetEntityTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dataSourceName = None
                    return
            Holder.__name__ = "GetEntityTypes_Holder"
            self.pyclass = Holder

    class GetEntityTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetEntityTypesResponse"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetEntityTypesResponse_Dec.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","ArrayOfEntityType",lazy=False)(pname=(ns,"GetEntityTypesResult"), aname="_GetEntityTypesResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetEntityTypesResponse')
            kw["aname"] = "_GetEntityTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetEntityTypesResult = None
                    return
            Holder.__name__ = "GetEntityTypesResponse_Holder"
            self.pyclass = Holder

    class GetDataSourceInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetDataSourceInfo"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetDataSourceInfo_Dec.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","ArrayOfString",lazy=False)(pname=(ns,"dataSourceNames"), aname="_dataSourceNames", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetDataSourceInfo')
            kw["aname"] = "_GetDataSourceInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dataSourceNames = None
                    return
            Holder.__name__ = "GetDataSourceInfo_Holder"
            self.pyclass = Holder

    class GetDataSourceInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetDataSourceInfoResponse"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetDataSourceInfoResponse_Dec.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","ArrayOfDataSource",lazy=False)(pname=(ns,"GetDataSourceInfoResult"), aname="_GetDataSourceInfoResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetDataSourceInfoResponse')
            kw["aname"] = "_GetDataSourceInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetDataSourceInfoResult = None
                    return
            Holder.__name__ = "GetDataSourceInfoResponse_Holder"
            self.pyclass = Holder

    class GetGreatCircleDistances_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetGreatCircleDistances"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetGreatCircleDistances_Dec.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","ArrayOfLatLong",lazy=False)(pname=(ns,"latLongs"), aname="_latLongs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetGreatCircleDistances')
            kw["aname"] = "_GetGreatCircleDistances"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._latLongs = None
                    return
            Holder.__name__ = "GetGreatCircleDistances_Holder"
            self.pyclass = Holder

    class GetGreatCircleDistancesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetGreatCircleDistancesResponse"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetGreatCircleDistancesResponse_Dec.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","ArrayOfDouble",lazy=False)(pname=(ns,"GetGreatCircleDistancesResult"), aname="_GetGreatCircleDistancesResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetGreatCircleDistancesResponse')
            kw["aname"] = "_GetGreatCircleDistancesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetGreatCircleDistancesResult = None
                    return
            Holder.__name__ = "GetGreatCircleDistancesResponse_Holder"
            self.pyclass = Holder

    class GetClientToken_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetClientToken"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetClientToken_Dec.schema
            TClist = [GTD("http://s.mappoint.net/mappoint-30/","TokenSpecification",lazy=False)(pname=(ns,"specification"), aname="_specification", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetClientToken')
            kw["aname"] = "_GetClientToken"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._specification = None
                    return
            Holder.__name__ = "GetClientToken_Holder"
            self.pyclass = Holder

    class GetClientTokenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetClientTokenResponse"
        schema = "http://s.mappoint.net/mappoint-30/"
        def __init__(self, **kw):
            ns = ns0.GetClientTokenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"GetClientTokenResult"), aname="_GetClientTokenResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://s.mappoint.net/mappoint-30/', u'GetClientTokenResponse')
            kw["aname"] = "_GetClientTokenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetClientTokenResult = None
                    return
            Holder.__name__ = "GetClientTokenResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://s.mappoint.net/mappoint-30/)
