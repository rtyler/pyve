##################################################
# file: GeocodeService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/local/bin/wsdl2py http://staging.dev.virtualearth.net/webservices/v1/metadata/geocodeservice/geocodeservice.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://schemas.microsoft.com/2003/10/Serialization/
##############################

class ns1:
    targetNamespace = "http://schemas.microsoft.com/2003/10/Serialization/"

    class char_Def(ZSI.TCnumbers.Iint, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "char")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.Iint.__init__(self, pname, pyclass=None, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class duration_Def(ZSI.TCtimes.Duration, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "duration")
        def __init__(self, pname, **kw):
            ZSI.TCtimes.Duration.__init__(self, pname, pyclass=None, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class guid_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "guid")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class anyType_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "anyType"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'anyType')
            kw["aname"] = "_anyType"
            ZSI.TC.AnyType.__init__(self, **kw)

    class anyURI_Dec(ZSI.TC.URI, ElementDeclaration):
        literal = "anyURI"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'anyURI')
            kw["aname"] = "_anyURI"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_anyURI_immutable_holder"
            ZSI.TC.URI.__init__(self, **kw)

    class base64Binary_Dec(ZSI.TC.Base64String, ElementDeclaration):
        literal = "base64Binary"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'base64Binary')
            kw["aname"] = "_base64Binary"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_base64Binary_immutable_holder"
            ZSI.TC.Base64String.__init__(self, **kw)

    class boolean_Dec(ZSI.TC.Boolean, ElementDeclaration):
        literal = "boolean"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'boolean')
            kw["aname"] = "_boolean"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_boolean_immutable_holder"
            ZSI.TC.Boolean.__init__(self, **kw)

    class byte_Dec(ZSI.TCnumbers.Ibyte, ElementDeclaration):
        literal = "byte"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'byte')
            kw["aname"] = "_byte"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_byte_immutable_holder"
            ZSI.TCnumbers.Ibyte.__init__(self, **kw)

    class dateTime_Dec(ZSI.TCtimes.gDateTime, ElementDeclaration):
        literal = "dateTime"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'dateTime')
            kw["aname"] = "_dateTime"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_dateTime_immutable_holder"
            ZSI.TCtimes.gDateTime.__init__(self, **kw)

    class decimal_Dec(ZSI.TC.Decimal, ElementDeclaration):
        literal = "decimal"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'decimal')
            kw["aname"] = "_decimal"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_decimal_immutable_holder"
            ZSI.TC.Decimal.__init__(self, **kw)

    class double_Dec(ZSI.TCnumbers.FPdouble, ElementDeclaration):
        literal = "double"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'double')
            kw["aname"] = "_double"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_double_immutable_holder"
            ZSI.TCnumbers.FPdouble.__init__(self, **kw)

    class float_Dec(ZSI.TCnumbers.FPfloat, ElementDeclaration):
        literal = "float"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'float')
            kw["aname"] = "_float"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_float_immutable_holder"
            ZSI.TCnumbers.FPfloat.__init__(self, **kw)

    class int_Dec(ZSI.TCnumbers.Iint, ElementDeclaration):
        literal = "int"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'int')
            kw["aname"] = "_int"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_int_immutable_holder"
            ZSI.TCnumbers.Iint.__init__(self, **kw)

    class long_Dec(ZSI.TCnumbers.Ilong, ElementDeclaration):
        literal = "long"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'long')
            kw["aname"] = "_long"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_long_immutable_holder"
            ZSI.TCnumbers.Ilong.__init__(self, **kw)

    class QName_Dec(ZSI.TC.QName, ElementDeclaration):
        literal = "QName"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'QName')
            kw["aname"] = "_QName"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_QName_immutable_holder"
            ZSI.TC.QName.__init__(self, **kw)

    class short_Dec(ZSI.TCnumbers.Ishort, ElementDeclaration):
        literal = "short"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'short')
            kw["aname"] = "_short"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_short_immutable_holder"
            ZSI.TCnumbers.Ishort.__init__(self, **kw)

    class string_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "string"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'string')
            kw["aname"] = "_string"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_string_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class unsignedByte_Dec(ZSI.TCnumbers.IunsignedByte, ElementDeclaration):
        literal = "unsignedByte"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'unsignedByte')
            kw["aname"] = "_unsignedByte"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedByte_immutable_holder"
            ZSI.TCnumbers.IunsignedByte.__init__(self, **kw)

    class unsignedInt_Dec(ZSI.TCnumbers.IunsignedInt, ElementDeclaration):
        literal = "unsignedInt"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'unsignedInt')
            kw["aname"] = "_unsignedInt"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedInt_immutable_holder"
            ZSI.TCnumbers.IunsignedInt.__init__(self, **kw)

    class unsignedLong_Dec(ZSI.TCnumbers.IunsignedLong, ElementDeclaration):
        literal = "unsignedLong"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'unsignedLong')
            kw["aname"] = "_unsignedLong"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedLong_immutable_holder"
            ZSI.TCnumbers.IunsignedLong.__init__(self, **kw)

    class unsignedShort_Dec(ZSI.TCnumbers.IunsignedShort, ElementDeclaration):
        literal = "unsignedShort"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'unsignedShort')
            kw["aname"] = "_unsignedShort"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedShort_immutable_holder"
            ZSI.TCnumbers.IunsignedShort.__init__(self, **kw)

    class char_Dec(ElementDeclaration):
        literal = "char"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'char')
            kw["aname"] = "_char"
            if ns1.char_Def not in ns1.char_Dec.__bases__:
                bases = list(ns1.char_Dec.__bases__)
                bases.insert(0, ns1.char_Def)
                ns1.char_Dec.__bases__ = tuple(bases)

            ns1.char_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "char_Dec_Holder"

    class duration_Dec(ElementDeclaration):
        literal = "duration"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'duration')
            kw["aname"] = "_duration"
            if ns1.duration_Def not in ns1.duration_Dec.__bases__:
                bases = list(ns1.duration_Dec.__bases__)
                bases.insert(0, ns1.duration_Def)
                ns1.duration_Dec.__bases__ = tuple(bases)

            ns1.duration_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "duration_Dec_Holder"

    class guid_Dec(ElementDeclaration):
        literal = "guid"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/', u'guid')
            kw["aname"] = "_guid"
            if ns1.guid_Def not in ns1.guid_Dec.__bases__:
                bases = list(ns1.guid_Dec.__bases__)
                bases.insert(0, ns1.guid_Def)
                ns1.guid_Dec.__bases__ = tuple(bases)

            ns1.guid_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "guid_Dec_Holder"

# end class ns1 (tns: http://schemas.microsoft.com/2003/10/Serialization/)

##############################
# targetNamespace
# http://dev.virtualearth.net/webservices/v1/geocode/contracts
##############################

class ns4:
    targetNamespace = "http://dev.virtualearth.net/webservices/v1/geocode/contracts"

    class Geocode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Geocode"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode/contracts"
        def __init__(self, **kw):
            ns = ns4.Geocode_Dec.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/geocode","GeocodeRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode/contracts', u'Geocode')
            kw["aname"] = "_Geocode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "Geocode_Holder"
            self.pyclass = Holder

    class GeocodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GeocodeResponse"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode/contracts"
        def __init__(self, **kw):
            ns = ns4.GeocodeResponse_Dec.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/geocode","GeocodeResponse",lazy=False)(pname=(ns,"GeocodeResult"), aname="_GeocodeResult", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode/contracts', u'GeocodeResponse')
            kw["aname"] = "_GeocodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GeocodeResult = None
                    return
            Holder.__name__ = "GeocodeResponse_Holder"
            self.pyclass = Holder

    class ReverseGeocode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReverseGeocode"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode/contracts"
        def __init__(self, **kw):
            ns = ns4.ReverseGeocode_Dec.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/geocode","ReverseGeocodeRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode/contracts', u'ReverseGeocode')
            kw["aname"] = "_ReverseGeocode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "ReverseGeocode_Holder"
            self.pyclass = Holder

    class ReverseGeocodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReverseGeocodeResponse"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode/contracts"
        def __init__(self, **kw):
            ns = ns4.ReverseGeocodeResponse_Dec.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/geocode","GeocodeResponse",lazy=False)(pname=(ns,"ReverseGeocodeResult"), aname="_ReverseGeocodeResult", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode/contracts', u'ReverseGeocodeResponse')
            kw["aname"] = "_ReverseGeocodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReverseGeocodeResult = None
                    return
            Holder.__name__ = "ReverseGeocodeResponse_Holder"
            self.pyclass = Holder

# end class ns4 (tns: http://dev.virtualearth.net/webservices/v1/geocode/contracts)

##############################
# targetNamespace
# http://dev.virtualearth.net/webservices/v1/geocode/contracts/Imports
##############################

class ns0:
    targetNamespace = "http://dev.virtualearth.net/webservices/v1/geocode/contracts/Imports"

# end class ns0 (tns: http://dev.virtualearth.net/webservices/v1/geocode/contracts/Imports)

##############################
# targetNamespace
# http://dev.virtualearth.net/webservices/v1/geocode
##############################

class ns5:
    targetNamespace = "http://dev.virtualearth.net/webservices/v1/geocode"

    class GeocodeRequest_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        type = (schema, "GeocodeRequest")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns5.GeocodeRequest_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","Address",lazy=False)(pname=(ns,"Address"), aname="_Address", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/geocode","GeocodeOptions",lazy=False)(pname=(ns,"Options"), aname="_Options", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Query"), aname="_Query", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.RequestBase_Def not in ns5.GeocodeRequest_Def.__bases__:
                bases = list(ns5.GeocodeRequest_Def.__bases__)
                bases.insert(0, ns3.RequestBase_Def)
                ns5.GeocodeRequest_Def.__bases__ = tuple(bases)

            ns3.RequestBase_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeocodeOptions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        type = (schema, "GeocodeOptions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns5.GeocodeOptions_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"Count"), aname="_Count", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/geocode","ArrayOfFilterBase",lazy=False)(pname=(ns,"Filters"), aname="_Filters", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Count = None
                    self._Filters = None
                    return
            Holder.__name__ = "GeocodeOptions_Holder"
            self.pyclass = Holder

    class ArrayOfFilterBase_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        type = (schema, "ArrayOfFilterBase")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns5.ArrayOfFilterBase_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/geocode","FilterBase",lazy=False)(pname=(ns,"FilterBase"), aname="_FilterBase", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FilterBase = []
                    return
            Holder.__name__ = "ArrayOfFilterBase_Holder"
            self.pyclass = Holder

    class FilterBase_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        type = (schema, "FilterBase")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns5.FilterBase_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "FilterBase_Holder"
            self.pyclass = Holder

    class ConfidenceFilter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        type = (schema, "ConfidenceFilter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns5.ConfidenceFilter_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","Confidence",lazy=False)(pname=(ns,"MinimumConfidence"), aname="_MinimumConfidence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns5.FilterBase_Def not in ns5.ConfidenceFilter_Def.__bases__:
                bases = list(ns5.ConfidenceFilter_Def.__bases__)
                bases.insert(0, ns5.FilterBase_Def)
                ns5.ConfidenceFilter_Def.__bases__ = tuple(bases)

            ns5.FilterBase_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeocodeResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        type = (schema, "GeocodeResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns5.GeocodeResponse_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","ArrayOfGeocodeResult",lazy=False)(pname=(ns,"Results"), aname="_Results", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ResponseBase_Def not in ns5.GeocodeResponse_Def.__bases__:
                bases = list(ns5.GeocodeResponse_Def.__bases__)
                bases.insert(0, ns3.ResponseBase_Def)
                ns5.GeocodeResponse_Def.__bases__ = tuple(bases)

            ns3.ResponseBase_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReverseGeocodeRequest_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        type = (schema, "ReverseGeocodeRequest")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns5.ReverseGeocodeRequest_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","Location",lazy=False)(pname=(ns,"Location"), aname="_Location", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.RequestBase_Def not in ns5.ReverseGeocodeRequest_Def.__bases__:
                bases = list(ns5.ReverseGeocodeRequest_Def.__bases__)
                bases.insert(0, ns3.RequestBase_Def)
                ns5.ReverseGeocodeRequest_Def.__bases__ = tuple(bases)

            ns3.RequestBase_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GeocodeRequest_Dec(ElementDeclaration):
        literal = "GeocodeRequest"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode', u'GeocodeRequest')
            kw["aname"] = "_GeocodeRequest"
            if ns5.GeocodeRequest_Def not in ns5.GeocodeRequest_Dec.__bases__:
                bases = list(ns5.GeocodeRequest_Dec.__bases__)
                bases.insert(0, ns5.GeocodeRequest_Def)
                ns5.GeocodeRequest_Dec.__bases__ = tuple(bases)

            ns5.GeocodeRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GeocodeRequest_Dec_Holder"

    class GeocodeOptions_Dec(ElementDeclaration):
        literal = "GeocodeOptions"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode', u'GeocodeOptions')
            kw["aname"] = "_GeocodeOptions"
            if ns5.GeocodeOptions_Def not in ns5.GeocodeOptions_Dec.__bases__:
                bases = list(ns5.GeocodeOptions_Dec.__bases__)
                bases.insert(0, ns5.GeocodeOptions_Def)
                ns5.GeocodeOptions_Dec.__bases__ = tuple(bases)

            ns5.GeocodeOptions_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GeocodeOptions_Dec_Holder"

    class ArrayOfFilterBase_Dec(ElementDeclaration):
        literal = "ArrayOfFilterBase"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode', u'ArrayOfFilterBase')
            kw["aname"] = "_ArrayOfFilterBase"
            if ns5.ArrayOfFilterBase_Def not in ns5.ArrayOfFilterBase_Dec.__bases__:
                bases = list(ns5.ArrayOfFilterBase_Dec.__bases__)
                bases.insert(0, ns5.ArrayOfFilterBase_Def)
                ns5.ArrayOfFilterBase_Dec.__bases__ = tuple(bases)

            ns5.ArrayOfFilterBase_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfFilterBase_Dec_Holder"

    class FilterBase_Dec(ElementDeclaration):
        literal = "FilterBase"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode', u'FilterBase')
            kw["aname"] = "_FilterBase"
            if ns5.FilterBase_Def not in ns5.FilterBase_Dec.__bases__:
                bases = list(ns5.FilterBase_Dec.__bases__)
                bases.insert(0, ns5.FilterBase_Def)
                ns5.FilterBase_Dec.__bases__ = tuple(bases)

            ns5.FilterBase_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "FilterBase_Dec_Holder"

    class ConfidenceFilter_Dec(ElementDeclaration):
        literal = "ConfidenceFilter"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode', u'ConfidenceFilter')
            kw["aname"] = "_ConfidenceFilter"
            if ns5.ConfidenceFilter_Def not in ns5.ConfidenceFilter_Dec.__bases__:
                bases = list(ns5.ConfidenceFilter_Dec.__bases__)
                bases.insert(0, ns5.ConfidenceFilter_Def)
                ns5.ConfidenceFilter_Dec.__bases__ = tuple(bases)

            ns5.ConfidenceFilter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ConfidenceFilter_Dec_Holder"

    class GeocodeResponse_Dec(ElementDeclaration):
        literal = "GeocodeResponse"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode', u'GeocodeResponse')
            kw["aname"] = "_GeocodeResponse"
            if ns5.GeocodeResponse_Def not in ns5.GeocodeResponse_Dec.__bases__:
                bases = list(ns5.GeocodeResponse_Dec.__bases__)
                bases.insert(0, ns5.GeocodeResponse_Def)
                ns5.GeocodeResponse_Dec.__bases__ = tuple(bases)

            ns5.GeocodeResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GeocodeResponse_Dec_Holder"

    class ReverseGeocodeRequest_Dec(ElementDeclaration):
        literal = "ReverseGeocodeRequest"
        schema = "http://dev.virtualearth.net/webservices/v1/geocode"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/geocode', u'ReverseGeocodeRequest')
            kw["aname"] = "_ReverseGeocodeRequest"
            if ns5.ReverseGeocodeRequest_Def not in ns5.ReverseGeocodeRequest_Dec.__bases__:
                bases = list(ns5.ReverseGeocodeRequest_Dec.__bases__)
                bases.insert(0, ns5.ReverseGeocodeRequest_Def)
                ns5.ReverseGeocodeRequest_Dec.__bases__ = tuple(bases)

            ns5.ReverseGeocodeRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ReverseGeocodeRequest_Dec_Holder"

# end class ns5 (tns: http://dev.virtualearth.net/webservices/v1/geocode)

##############################
# targetNamespace
# http://schemas.microsoft.com/2003/10/Serialization/Arrays
##############################

class ns2:
    targetNamespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

    class ArrayOfstring_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/Arrays"
        type = (schema, "ArrayOfstring")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ArrayOfstring_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"string"), aname="_string", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._string = []
                    return
            Holder.__name__ = "ArrayOfstring_Holder"
            self.pyclass = Holder

    class ArrayOfstring_Dec(ElementDeclaration):
        literal = "ArrayOfstring"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/Arrays"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://schemas.microsoft.com/2003/10/Serialization/Arrays', u'ArrayOfstring')
            kw["aname"] = "_ArrayOfstring"
            if ns2.ArrayOfstring_Def not in ns2.ArrayOfstring_Dec.__bases__:
                bases = list(ns2.ArrayOfstring_Dec.__bases__)
                bases.insert(0, ns2.ArrayOfstring_Def)
                ns2.ArrayOfstring_Dec.__bases__ = tuple(bases)

            ns2.ArrayOfstring_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfstring_Dec_Holder"

# end class ns2 (tns: http://schemas.microsoft.com/2003/10/Serialization/Arrays)

##############################
# targetNamespace
# http://dev.virtualearth.net/webservices/v1/common
##############################

class ns3:
    targetNamespace = "http://dev.virtualearth.net/webservices/v1/common"

    class RequestBase_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "RequestBase")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.RequestBase_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","Credentials",lazy=False)(pname=(ns,"Credentials"), aname="_Credentials", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Culture"), aname="_Culture", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","ExecutionOptions",lazy=False)(pname=(ns,"ExecutionOptions"), aname="_ExecutionOptions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","UserProfile",lazy=False)(pname=(ns,"UserProfile"), aname="_UserProfile", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Credentials = None
                    self._Culture = None
                    self._ExecutionOptions = None
                    self._UserProfile = None
                    return
            Holder.__name__ = "RequestBase_Holder"
            self.pyclass = Holder

    class Credentials_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "Credentials")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Credentials_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ApplicationId"), aname="_ApplicationId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Token"), aname="_Token", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ApplicationId = None
                    self._Token = None
                    return
            Holder.__name__ = "Credentials_Holder"
            self.pyclass = Holder

    class ExecutionOptions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "ExecutionOptions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ExecutionOptions_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"SuppressFaults"), aname="_SuppressFaults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SuppressFaults = None
                    return
            Holder.__name__ = "ExecutionOptions_Holder"
            self.pyclass = Holder

    class UserProfile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "UserProfile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.UserProfile_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","Heading",lazy=False)(pname=(ns,"CurrentHeading"), aname="_CurrentHeading", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","UserLocation",lazy=False)(pname=(ns,"CurrentLocation"), aname="_CurrentLocation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","DeviceType",lazy=False)(pname=(ns,"DeviceType"), aname="_DeviceType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","DistanceUnit",lazy=False)(pname=(ns,"DistanceUnit"), aname="_DistanceUnit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IPAddress"), aname="_IPAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","ShapeBase",lazy=False)(pname=(ns,"MapView"), aname="_MapView", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","SizeOfint",lazy=False)(pname=(ns,"ScreenSize"), aname="_ScreenSize", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CurrentHeading = None
                    self._CurrentLocation = None
                    self._DeviceType = None
                    self._DistanceUnit = None
                    self._IPAddress = None
                    self._MapView = None
                    self._ScreenSize = None
                    return
            Holder.__name__ = "UserProfile_Holder"
            self.pyclass = Holder

    class Heading_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "Heading")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Heading_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"Orientation"), aname="_Orientation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Orientation = None
                    return
            Holder.__name__ = "Heading_Holder"
            self.pyclass = Holder

    class UserLocation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "UserLocation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.UserLocation_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","Confidence",lazy=False)(pname=(ns,"Confidence"), aname="_Confidence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Location_Def not in ns3.UserLocation_Def.__bases__:
                bases = list(ns3.UserLocation_Def.__bases__)
                bases.insert(0, ns3.Location_Def)
                ns3.UserLocation_Def.__bases__ = tuple(bases)

            ns3.Location_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Location_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "Location")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Location_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"Altitude"), aname="_Altitude", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Latitude"), aname="_Latitude", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Longitude"), aname="_Longitude", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Altitude = None
                    self._Latitude = None
                    self._Longitude = None
                    return
            Holder.__name__ = "Location_Holder"
            self.pyclass = Holder

    class GeocodeLocation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "GeocodeLocation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.GeocodeLocation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"CalculationMethod"), aname="_CalculationMethod", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Location_Def not in ns3.GeocodeLocation_Def.__bases__:
                bases = list(ns3.GeocodeLocation_Def.__bases__)
                bases.insert(0, ns3.Location_Def)
                ns3.GeocodeLocation_Def.__bases__ = tuple(bases)

            ns3.Location_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Confidence_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "Confidence")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeviceType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "DeviceType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DistanceUnit_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "DistanceUnit")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ShapeBase_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "ShapeBase")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ShapeBase_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ShapeBase_Holder"
            self.pyclass = Holder

    class Rectangle_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "Rectangle")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Rectangle_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","Location",lazy=False)(pname=(ns,"Northeast"), aname="_Northeast", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","Location",lazy=False)(pname=(ns,"Southwest"), aname="_Southwest", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ShapeBase_Def not in ns3.Rectangle_Def.__bases__:
                bases = list(ns3.Rectangle_Def.__bases__)
                bases.insert(0, ns3.ShapeBase_Def)
                ns3.Rectangle_Def.__bases__ = tuple(bases)

            ns3.ShapeBase_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Circle_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "Circle")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Circle_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","Location",lazy=False)(pname=(ns,"Center"), aname="_Center", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","DistanceUnit",lazy=False)(pname=(ns,"DistanceUnit"), aname="_DistanceUnit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Radius"), aname="_Radius", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ShapeBase_Def not in ns3.Circle_Def.__bases__:
                bases = list(ns3.Circle_Def.__bases__)
                bases.insert(0, ns3.ShapeBase_Def)
                ns3.Circle_Def.__bases__ = tuple(bases)

            ns3.ShapeBase_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Polygon_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "Polygon")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Polygon_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","ArrayOfLocation",lazy=False)(pname=(ns,"Vertices"), aname="_Vertices", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ShapeBase_Def not in ns3.Polygon_Def.__bases__:
                bases = list(ns3.Polygon_Def.__bases__)
                bases.insert(0, ns3.ShapeBase_Def)
                ns3.Polygon_Def.__bases__ = tuple(bases)

            ns3.ShapeBase_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayOfLocation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "ArrayOfLocation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ArrayOfLocation_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","Location",lazy=False)(pname=(ns,"Location"), aname="_Location", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Location = []
                    return
            Holder.__name__ = "ArrayOfLocation_Holder"
            self.pyclass = Holder

    class SizeOfint_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "SizeOfint")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.SizeOfint_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"Height"), aname="_Height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Width"), aname="_Width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Height = None
                    self._Width = None
                    return
            Holder.__name__ = "SizeOfint_Holder"
            self.pyclass = Holder

    class Address_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "Address")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Address_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"AddressLine"), aname="_AddressLine", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AdminDistrict"), aname="_AdminDistrict", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CountryRegion"), aname="_CountryRegion", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"District"), aname="_District", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FormattedAddress"), aname="_FormattedAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Locality"), aname="_Locality", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PostalCode"), aname="_PostalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PostalTown"), aname="_PostalTown", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AddressLine = None
                    self._AdminDistrict = None
                    self._CountryRegion = None
                    self._District = None
                    self._FormattedAddress = None
                    self._Locality = None
                    self._PostalCode = None
                    self._PostalTown = None
                    return
            Holder.__name__ = "Address_Holder"
            self.pyclass = Holder

    class ResponseBase_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "ResponseBase")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ResponseBase_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","ResponseSummary",lazy=False)(pname=(ns,"ResponseSummary"), aname="_ResponseSummary", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResponseSummary = None
                    return
            Holder.__name__ = "ResponseBase_Holder"
            self.pyclass = Holder

    class ResponseSummary_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "ResponseSummary")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ResponseSummary_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","AuthenticationResultCode",lazy=False)(pname=(ns,"AuthenticationResultCode"), aname="_AuthenticationResultCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Copyright"), aname="_Copyright", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FaultReason"), aname="_FaultReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","ResponseStatusCode",lazy=False)(pname=(ns,"StatusCode"), aname="_StatusCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TraceId"), aname="_TraceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AuthenticationResultCode = None
                    self._Copyright = None
                    self._FaultReason = None
                    self._StatusCode = None
                    self._TraceId = None
                    return
            Holder.__name__ = "ResponseSummary_Holder"
            self.pyclass = Holder

    class AuthenticationResultCode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "AuthenticationResultCode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ResponseStatusCode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "ResponseStatusCode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfGeocodeResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "ArrayOfGeocodeResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ArrayOfGeocodeResult_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","GeocodeResult",lazy=False)(pname=(ns,"GeocodeResult"), aname="_GeocodeResult", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GeocodeResult = []
                    return
            Holder.__name__ = "ArrayOfGeocodeResult_Holder"
            self.pyclass = Holder

    class GeocodeResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "GeocodeResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.GeocodeResult_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","Address",lazy=False)(pname=(ns,"Address"), aname="_Address", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","Rectangle",lazy=False)(pname=(ns,"BestView"), aname="_BestView", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","Confidence",lazy=False)(pname=(ns,"Confidence"), aname="_Confidence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DisplayName"), aname="_DisplayName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EntityType"), aname="_EntityType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://dev.virtualearth.net/webservices/v1/common","ArrayOfGeocodeLocation",lazy=False)(pname=(ns,"Locations"), aname="_Locations", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://schemas.microsoft.com/2003/10/Serialization/Arrays","ArrayOfstring",lazy=False)(pname=(ns,"MatchCodes"), aname="_MatchCodes", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Address = None
                    self._BestView = None
                    self._Confidence = None
                    self._DisplayName = None
                    self._EntityType = None
                    self._Locations = None
                    self._MatchCodes = None
                    return
            Holder.__name__ = "GeocodeResult_Holder"
            self.pyclass = Holder

    class ArrayOfGeocodeLocation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        type = (schema, "ArrayOfGeocodeLocation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ArrayOfGeocodeLocation_Def.schema
            TClist = [GTD("http://dev.virtualearth.net/webservices/v1/common","GeocodeLocation",lazy=False)(pname=(ns,"GeocodeLocation"), aname="_GeocodeLocation", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GeocodeLocation = []
                    return
            Holder.__name__ = "ArrayOfGeocodeLocation_Holder"
            self.pyclass = Holder

    class RequestBase_Dec(ElementDeclaration):
        literal = "RequestBase"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'RequestBase')
            kw["aname"] = "_RequestBase"
            if ns3.RequestBase_Def not in ns3.RequestBase_Dec.__bases__:
                bases = list(ns3.RequestBase_Dec.__bases__)
                bases.insert(0, ns3.RequestBase_Def)
                ns3.RequestBase_Dec.__bases__ = tuple(bases)

            ns3.RequestBase_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestBase_Dec_Holder"

    class Credentials_Dec(ElementDeclaration):
        literal = "Credentials"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'Credentials')
            kw["aname"] = "_Credentials"
            if ns3.Credentials_Def not in ns3.Credentials_Dec.__bases__:
                bases = list(ns3.Credentials_Dec.__bases__)
                bases.insert(0, ns3.Credentials_Def)
                ns3.Credentials_Dec.__bases__ = tuple(bases)

            ns3.Credentials_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Credentials_Dec_Holder"

    class ExecutionOptions_Dec(ElementDeclaration):
        literal = "ExecutionOptions"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'ExecutionOptions')
            kw["aname"] = "_ExecutionOptions"
            if ns3.ExecutionOptions_Def not in ns3.ExecutionOptions_Dec.__bases__:
                bases = list(ns3.ExecutionOptions_Dec.__bases__)
                bases.insert(0, ns3.ExecutionOptions_Def)
                ns3.ExecutionOptions_Dec.__bases__ = tuple(bases)

            ns3.ExecutionOptions_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ExecutionOptions_Dec_Holder"

    class UserProfile_Dec(ElementDeclaration):
        literal = "UserProfile"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'UserProfile')
            kw["aname"] = "_UserProfile"
            if ns3.UserProfile_Def not in ns3.UserProfile_Dec.__bases__:
                bases = list(ns3.UserProfile_Dec.__bases__)
                bases.insert(0, ns3.UserProfile_Def)
                ns3.UserProfile_Dec.__bases__ = tuple(bases)

            ns3.UserProfile_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UserProfile_Dec_Holder"

    class Heading_Dec(ElementDeclaration):
        literal = "Heading"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'Heading')
            kw["aname"] = "_Heading"
            if ns3.Heading_Def not in ns3.Heading_Dec.__bases__:
                bases = list(ns3.Heading_Dec.__bases__)
                bases.insert(0, ns3.Heading_Def)
                ns3.Heading_Dec.__bases__ = tuple(bases)

            ns3.Heading_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Heading_Dec_Holder"

    class UserLocation_Dec(ElementDeclaration):
        literal = "UserLocation"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'UserLocation')
            kw["aname"] = "_UserLocation"
            if ns3.UserLocation_Def not in ns3.UserLocation_Dec.__bases__:
                bases = list(ns3.UserLocation_Dec.__bases__)
                bases.insert(0, ns3.UserLocation_Def)
                ns3.UserLocation_Dec.__bases__ = tuple(bases)

            ns3.UserLocation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UserLocation_Dec_Holder"

    class Location_Dec(ElementDeclaration):
        literal = "Location"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'Location')
            kw["aname"] = "_Location"
            if ns3.Location_Def not in ns3.Location_Dec.__bases__:
                bases = list(ns3.Location_Dec.__bases__)
                bases.insert(0, ns3.Location_Def)
                ns3.Location_Dec.__bases__ = tuple(bases)

            ns3.Location_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Location_Dec_Holder"

    class GeocodeLocation_Dec(ElementDeclaration):
        literal = "GeocodeLocation"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'GeocodeLocation')
            kw["aname"] = "_GeocodeLocation"
            if ns3.GeocodeLocation_Def not in ns3.GeocodeLocation_Dec.__bases__:
                bases = list(ns3.GeocodeLocation_Dec.__bases__)
                bases.insert(0, ns3.GeocodeLocation_Def)
                ns3.GeocodeLocation_Dec.__bases__ = tuple(bases)

            ns3.GeocodeLocation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GeocodeLocation_Dec_Holder"

    class Confidence_Dec(ElementDeclaration):
        literal = "Confidence"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'Confidence')
            kw["aname"] = "_Confidence"
            if ns3.Confidence_Def not in ns3.Confidence_Dec.__bases__:
                bases = list(ns3.Confidence_Dec.__bases__)
                bases.insert(0, ns3.Confidence_Def)
                ns3.Confidence_Dec.__bases__ = tuple(bases)

            ns3.Confidence_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Confidence_Dec_Holder"

    class DeviceType_Dec(ElementDeclaration):
        literal = "DeviceType"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'DeviceType')
            kw["aname"] = "_DeviceType"
            if ns3.DeviceType_Def not in ns3.DeviceType_Dec.__bases__:
                bases = list(ns3.DeviceType_Dec.__bases__)
                bases.insert(0, ns3.DeviceType_Def)
                ns3.DeviceType_Dec.__bases__ = tuple(bases)

            ns3.DeviceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DeviceType_Dec_Holder"

    class DistanceUnit_Dec(ElementDeclaration):
        literal = "DistanceUnit"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'DistanceUnit')
            kw["aname"] = "_DistanceUnit"
            if ns3.DistanceUnit_Def not in ns3.DistanceUnit_Dec.__bases__:
                bases = list(ns3.DistanceUnit_Dec.__bases__)
                bases.insert(0, ns3.DistanceUnit_Def)
                ns3.DistanceUnit_Dec.__bases__ = tuple(bases)

            ns3.DistanceUnit_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DistanceUnit_Dec_Holder"

    class ShapeBase_Dec(ElementDeclaration):
        literal = "ShapeBase"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'ShapeBase')
            kw["aname"] = "_ShapeBase"
            if ns3.ShapeBase_Def not in ns3.ShapeBase_Dec.__bases__:
                bases = list(ns3.ShapeBase_Dec.__bases__)
                bases.insert(0, ns3.ShapeBase_Def)
                ns3.ShapeBase_Dec.__bases__ = tuple(bases)

            ns3.ShapeBase_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ShapeBase_Dec_Holder"

    class Rectangle_Dec(ElementDeclaration):
        literal = "Rectangle"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'Rectangle')
            kw["aname"] = "_Rectangle"
            if ns3.Rectangle_Def not in ns3.Rectangle_Dec.__bases__:
                bases = list(ns3.Rectangle_Dec.__bases__)
                bases.insert(0, ns3.Rectangle_Def)
                ns3.Rectangle_Dec.__bases__ = tuple(bases)

            ns3.Rectangle_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Rectangle_Dec_Holder"

    class Circle_Dec(ElementDeclaration):
        literal = "Circle"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'Circle')
            kw["aname"] = "_Circle"
            if ns3.Circle_Def not in ns3.Circle_Dec.__bases__:
                bases = list(ns3.Circle_Dec.__bases__)
                bases.insert(0, ns3.Circle_Def)
                ns3.Circle_Dec.__bases__ = tuple(bases)

            ns3.Circle_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Circle_Dec_Holder"

    class Polygon_Dec(ElementDeclaration):
        literal = "Polygon"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'Polygon')
            kw["aname"] = "_Polygon"
            if ns3.Polygon_Def not in ns3.Polygon_Dec.__bases__:
                bases = list(ns3.Polygon_Dec.__bases__)
                bases.insert(0, ns3.Polygon_Def)
                ns3.Polygon_Dec.__bases__ = tuple(bases)

            ns3.Polygon_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Polygon_Dec_Holder"

    class ArrayOfLocation_Dec(ElementDeclaration):
        literal = "ArrayOfLocation"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'ArrayOfLocation')
            kw["aname"] = "_ArrayOfLocation"
            if ns3.ArrayOfLocation_Def not in ns3.ArrayOfLocation_Dec.__bases__:
                bases = list(ns3.ArrayOfLocation_Dec.__bases__)
                bases.insert(0, ns3.ArrayOfLocation_Def)
                ns3.ArrayOfLocation_Dec.__bases__ = tuple(bases)

            ns3.ArrayOfLocation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfLocation_Dec_Holder"

    class SizeOfint_Dec(ElementDeclaration):
        literal = "SizeOfint"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'SizeOfint')
            kw["aname"] = "_SizeOfint"
            if ns3.SizeOfint_Def not in ns3.SizeOfint_Dec.__bases__:
                bases = list(ns3.SizeOfint_Dec.__bases__)
                bases.insert(0, ns3.SizeOfint_Def)
                ns3.SizeOfint_Dec.__bases__ = tuple(bases)

            ns3.SizeOfint_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SizeOfint_Dec_Holder"

    class Address_Dec(ElementDeclaration):
        literal = "Address"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'Address')
            kw["aname"] = "_Address"
            if ns3.Address_Def not in ns3.Address_Dec.__bases__:
                bases = list(ns3.Address_Dec.__bases__)
                bases.insert(0, ns3.Address_Def)
                ns3.Address_Dec.__bases__ = tuple(bases)

            ns3.Address_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Address_Dec_Holder"

    class ResponseBase_Dec(ElementDeclaration):
        literal = "ResponseBase"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'ResponseBase')
            kw["aname"] = "_ResponseBase"
            if ns3.ResponseBase_Def not in ns3.ResponseBase_Dec.__bases__:
                bases = list(ns3.ResponseBase_Dec.__bases__)
                bases.insert(0, ns3.ResponseBase_Def)
                ns3.ResponseBase_Dec.__bases__ = tuple(bases)

            ns3.ResponseBase_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseBase_Dec_Holder"

    class ResponseSummary_Dec(ElementDeclaration):
        literal = "ResponseSummary"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'ResponseSummary')
            kw["aname"] = "_ResponseSummary"
            if ns3.ResponseSummary_Def not in ns3.ResponseSummary_Dec.__bases__:
                bases = list(ns3.ResponseSummary_Dec.__bases__)
                bases.insert(0, ns3.ResponseSummary_Def)
                ns3.ResponseSummary_Dec.__bases__ = tuple(bases)

            ns3.ResponseSummary_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseSummary_Dec_Holder"

    class AuthenticationResultCode_Dec(ElementDeclaration):
        literal = "AuthenticationResultCode"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'AuthenticationResultCode')
            kw["aname"] = "_AuthenticationResultCode"
            if ns3.AuthenticationResultCode_Def not in ns3.AuthenticationResultCode_Dec.__bases__:
                bases = list(ns3.AuthenticationResultCode_Dec.__bases__)
                bases.insert(0, ns3.AuthenticationResultCode_Def)
                ns3.AuthenticationResultCode_Dec.__bases__ = tuple(bases)

            ns3.AuthenticationResultCode_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "AuthenticationResultCode_Dec_Holder"

    class ResponseStatusCode_Dec(ElementDeclaration):
        literal = "ResponseStatusCode"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'ResponseStatusCode')
            kw["aname"] = "_ResponseStatusCode"
            if ns3.ResponseStatusCode_Def not in ns3.ResponseStatusCode_Dec.__bases__:
                bases = list(ns3.ResponseStatusCode_Dec.__bases__)
                bases.insert(0, ns3.ResponseStatusCode_Def)
                ns3.ResponseStatusCode_Dec.__bases__ = tuple(bases)

            ns3.ResponseStatusCode_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseStatusCode_Dec_Holder"

    class ArrayOfGeocodeResult_Dec(ElementDeclaration):
        literal = "ArrayOfGeocodeResult"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'ArrayOfGeocodeResult')
            kw["aname"] = "_ArrayOfGeocodeResult"
            if ns3.ArrayOfGeocodeResult_Def not in ns3.ArrayOfGeocodeResult_Dec.__bases__:
                bases = list(ns3.ArrayOfGeocodeResult_Dec.__bases__)
                bases.insert(0, ns3.ArrayOfGeocodeResult_Def)
                ns3.ArrayOfGeocodeResult_Dec.__bases__ = tuple(bases)

            ns3.ArrayOfGeocodeResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfGeocodeResult_Dec_Holder"

    class GeocodeResult_Dec(ElementDeclaration):
        literal = "GeocodeResult"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'GeocodeResult')
            kw["aname"] = "_GeocodeResult"
            if ns3.GeocodeResult_Def not in ns3.GeocodeResult_Dec.__bases__:
                bases = list(ns3.GeocodeResult_Dec.__bases__)
                bases.insert(0, ns3.GeocodeResult_Def)
                ns3.GeocodeResult_Dec.__bases__ = tuple(bases)

            ns3.GeocodeResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GeocodeResult_Dec_Holder"

    class ArrayOfGeocodeLocation_Dec(ElementDeclaration):
        literal = "ArrayOfGeocodeLocation"
        schema = "http://dev.virtualearth.net/webservices/v1/common"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://dev.virtualearth.net/webservices/v1/common', u'ArrayOfGeocodeLocation')
            kw["aname"] = "_ArrayOfGeocodeLocation"
            if ns3.ArrayOfGeocodeLocation_Def not in ns3.ArrayOfGeocodeLocation_Dec.__bases__:
                bases = list(ns3.ArrayOfGeocodeLocation_Dec.__bases__)
                bases.insert(0, ns3.ArrayOfGeocodeLocation_Def)
                ns3.ArrayOfGeocodeLocation_Dec.__bases__ = tuple(bases)

            ns3.ArrayOfGeocodeLocation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfGeocodeLocation_Dec_Holder"

# end class ns3 (tns: http://dev.virtualearth.net/webservices/v1/common)
